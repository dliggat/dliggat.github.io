<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Liggat.org]]></title>
  <link href="http://liggat.org/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://liggat.org/"/>
  <updated>2014-12-14T15:40:06-08:00</updated>
  <id>http://liggat.org/</id>
  <author>
    <name><![CDATA[Dave Liggat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Full AWS Rails Stack Provision and Deployment With the Rubber Gem]]></title>
    <link href="http://liggat.org/2014/12/13/a-full-AWS-rails-stack-provision-and-deployment-with-the-rubber-gem/"/>
    <updated>2014-12-13T16:00:21-08:00</updated>
    <id>http://liggat.org/2014/12/13/a-full-AWS-rails-stack-provision-and-deployment-with-the-rubber-gem</id>
    <content type="html"><![CDATA[<p>It&rsquo;d been some time since I&rsquo;d set up a full <a href="http://rubyonrails.org/">Rails</a> stack on <a href="http://aws.amazon.com/">Amazon Web Services</a>. I thought it would be worth trying out <a href="https://github.com/rubber/rubber">rubber</a> from scratch to provision a full <strong>{Nginx, Passenger, PostgreSQL}</strong> stack on a single AWS host, with as much automation as possible, but without prematurely resorting to the cognitive-overhead of <a href="http://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook-chef11.html">Chef/OpsWorks</a>. This is my attempt to document the process, as I ran into a few roadblocks along the way.</p>

<!--more-->


<p>The <a href="http://railscasts.com/episodes/347-rubber-and-amazon-ec2">RailsCast</a> on <code>rubber</code> is a great place to start, as it gives a good overview on some of the primitive pieces such as setting up EC2 keypairs and so on. This post is written under the assumption it has been watched and understood, but I&rsquo;ll be targeting the <code>complete_passenger_nginx_postgresql</code> template rather than <code>complete_passenger_postgresql</code>, which the episode uses.</p>

<h2>Creating And Deploying &lsquo;Bloggy&rsquo;</h2>

<p>I started out with a super basic Rails app. The <code>git</code> repository is visible <a href="https://github.com/dliggat/bloggy">here</a>; each commit in the <a href="https://github.com/dliggat/bloggy/commits/master">history</a> corresponds to a step along the way. It has a root route which renders a page with the current time and hostname, and a single <code>REST</code>-ful resource: <code>/posts</code>.</p>

<h3>(1) Set Up the Basic App</h3>

<ul>
<li><a href="https://github.com/dliggat/bloggy/commit/e52a13e96549230cb8f0f1ad7e81381ae2434013">Create</a> the app: <code>bundle exec rails new bloggy -d postgresql</code></li>
<li><a href="https://github.com/dliggat/bloggy/commit/dcddbc02350812ce9f94842d09078b93f2257cb7">Scaffold</a> a model: <code>bundle exec rails g scaffold post title:string body:text</code></li>
<li><a href="https://github.com/dliggat/bloggy/commit/f59b8f311aab8cd24c8213f64b4e1441fdf03243">Create</a> database and migrate: <code>bundle exec rake db:create db:migrate</code></li>
<li><a href="https://github.com/dliggat/bloggy/commit/521fac60a7ab97e9c7a1fb2c6f54b514dbaa2a44">Add</a> a root route and a basic root page</li>
<li><a href="https://github.com/dliggat/bloggy/commit/5999bed32663165875726437cf04f3a0a23ff6ea">Add</a> <code>dotenv</code> for environment variable management in production</li>
<li><a href="https://github.com/dliggat/bloggy/compare/5999bed...63b4a27">Add</a> the following gems:

<ul>
<li><code>capistrano</code>: for deployment automation</li>
<li><code>rubber</code>: for EC2 provisioning</li>
<li><code>passenger</code>: for the Rails app server</li>
<li><code>therubyracer</code>: for asset precompilation in production</li>
</ul>
</li>
</ul>


<h3>(2) Configure Rubber</h3>

<ul>
<li><a href="https://github.com/dliggat/bloggy/commit/de11b73ede158f3b6a439ea68d8ebdc797850e74">Vulcanize</a> the desired stack: <code>vulcanize complete_passenger_nginx_postgresql</code></li>
<li><a href="https://github.com/dliggat/bloggy/compare/de11b73...d2536ec">Set</a> appropriate versions of <code>ruby</code> (for me: <code>2.1.2</code>), <code>ruby-build</code> and <code>passenger</code><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</li>
<li><a href="https://github.com/dliggat/bloggy/commit/d046ae4314ba669f465c18c9be0606de3398e22f">Set</a> basic properties of the app; <code>app_name</code> and so on.</li>
<li><a href="https://github.com/dliggat/bloggy/commit/d71b25d31986cd56543eeaae2b36b091f08de4f6">Pick</a> an EC2 image size and type compliant with your region. I&rsquo;m using Ubuntu 14.04 LTS in <code>us-west-2</code> (Oregon)<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>.</li>
<li><a href="https://github.com/dliggat/bloggy/commit/b1f0d94aba4da1e6eabdfb01290c3b06ead8384f">Enable</a> secure AWS credential storage for rubber using <code>~/.ec2/rubber-secret.yml</code>. You <strong>do not</strong> want to have these credentials in a <code>git</code> repository, irrespective of whether your repository is private or public (like <a href="https://github.com/dliggat/bloggy">mine</a>). My EC2 keys and credential file all live in <code>~/.ec2</code>:</li>
</ul>


<p><img class="center" src="/images/2014/ec2.png" width="700" title="&lsquo;EC2&rsquo;" ></p>

<h3>(3) Instantiate the EC2 Instance</h3>

<p>At this point, we&rsquo;re ready to fire up the EC2 instance:</p>

<ul>
<li><code>bundle exec rubber cap:create</code></li>
<li>Call the instance <code>production</code> and assign it every role within the app: <code>web,app,db:primary=true</code>.</li>
<li>Enter your local admin password when prompted â€“ so rubber can modify your <code>/etc/hosts</code> file.</li>
<li>Log into the AWS console => EC2, and ensure the image has been started. Grab the public DNS name of the instance<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>.</li>
</ul>


<p>If all has gone well, and the keys were setup correctly ahead of time, it should be possible to <code>ssh</code> to the newly launched instance:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>SSH to the instance </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ssh -v -i ~/.ec2/gsg-keypair &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;&amp;#x6d;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#x74;&amp;#x6f;&amp;#x3a;&amp;#x75;&amp;#x62;&amp;#117;&amp;#110;&amp;#x74;&amp;#x75;&amp;#x40;&amp;#x65;&amp;#99;&amp;#50;&amp;#x2d;&amp;#53;&amp;#52;&amp;#45;&amp;#x36;&amp;#57;&amp;#45;&amp;#x31;&amp;#56;&amp;#48;&amp;#45;&amp;#x31;&amp;#56;&amp;#50;&amp;#46;&amp;#x75;&amp;#115;&amp;#45;&amp;#119;&amp;#x65;&amp;#x73;&amp;#x74;&amp;#45;&amp;#x32;&amp;#x2e;&amp;#x63;&amp;#111;&amp;#x6d;&amp;#112;&amp;#x75;&amp;#x74;&amp;#x65;&amp;#x2e;&amp;#x61;&amp;#x6d;&amp;#97;&amp;#x7a;&amp;#x6f;&amp;#110;&amp;#97;&amp;#x77;&amp;#115;&amp;#x2e;&amp;#x63;&amp;#x6f;&amp;#109;&quot;</span>&gt;&amp;#x75;&amp;#x62;&amp;#117;&amp;#x6e;&amp;#x74;&amp;#x75;&amp;#x40;&amp;#x65;&amp;#99;&amp;#50;&amp;#x2d;&amp;#x35;&amp;#x34;&amp;#x2d;&amp;#54;&amp;#57;&amp;#x2d;&amp;#x31;&amp;#56;&amp;#48;&amp;#x2d;&amp;#x31;&amp;#56;&amp;#x32;&amp;#x2e;&amp;#x75;&amp;#115;&amp;#x2d;&amp;#x77;&amp;#x65;&amp;#x73;&amp;#116;&amp;#45;&amp;#x32;&amp;#x2e;&amp;#x63;&amp;#111;&amp;#109;&amp;#x70;&amp;#117;&amp;#x74;&amp;#101;&amp;#x2e;&amp;#97;&amp;#x6d;&amp;#x61;&amp;#x7a;&amp;#111;&amp;#110;&amp;#x61;&amp;#x77;&amp;#115;&amp;#46;&amp;#x63;&amp;#x6f;&amp;#109;&lt;/a&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>(4) Create the Deployment Environment</h3>

<p>With the instance running, we can now instruct <code>rubber</code> to install the relevant packages that are necessary to build the environment. Locally, run <code>bundle exec cap rubber:bootstrap</code>. This can take a while: it installs Linux updates, configures Nginx, builds and installs <code>ruby</code>, etc. This is the core of the annoying, manual, error-prone work that we seek to eliminate with <code>rubber</code>.</p>

<p>Once that completes, the machine is mostly ready to go. With <code>ssh</code> we can verify that the correct version of <code>ruby</code> is installed, etc:</p>

<pre><code># ruby --version
ruby 2.1.2p95 (2014-05-08 revision 45877) [x86_64-linux]
</code></pre>

<h3>(5) Initial Deployment</h3>

<p>With the machine ready, we can now use <code>capistrano</code> to deploy. This is where I first ran into issues. After attempting to deploy using <code>bundle exec cap deploy:cold</code>, I received the <code>rubber</code> error output:</p>

<pre><code>** [out :: production.bloggy.com] [ALERT] 347/141816 (2034) :
** [out :: production.bloggy.com] Starting proxy passenger_proxy: cannot bind socket
** [out :: production.bloggy.com]
** [out :: production.bloggy.com]
** [out :: production.bloggy.com]
** [out :: production.bloggy.com] [
** [out :: production.bloggy.com]
** [out :: production.bloggy.com] fail
** [out :: production.bloggy.com]
</code></pre>

<p>It turns out we need to delete the default Nginx configuration, which is conflicting with the port we&rsquo;re attempting to use. After <code>ssh</code>-ing to the machine:</p>

<ul>
<li>Delete the default configuration file: <code>sudo rm /etc/nginx/sites-enabled/default</code></li>
<li>Restart Nginx: <code>sudo service nginx restart</code></li>
</ul>


<p>Back again locally, attempt to deploy once more: <code>bundle exec cap deploy:cold</code>. It should succeed this time around.</p>

<h3>(6) Accessing the App</h3>

<p>With the machine provisioned, we are close to success. However, at this point I got an error page at <a href="http://ec2-54-69-180-182.us-west-2.compute.amazonaws.com">http://ec2-54-69-180-182.us-west-2.compute.amazonaws.com</a> in the browser. <code>curl</code> gives some insight as to what&rsquo;s going on:</p>

<pre><code>$ curl -i http://ec2-54-69-180-182.us-west-2.compute.amazonaws.com
HTTP/1.1 502 Bad Gateway
Server: nginx/1.6.2
Date: Sun, 14 Dec 2014 22:29:03 GMT
Content-Type: text/html
Content-Length: 1477
Connection: keep-alive
</code></pre>

<p>At this point, we need to take a look at the Nginx logs. After <code>ssh</code>-ing again to our instance, we can <code>tail -f /var/log/nginx/error.log</code> and notice that:</p>

<pre><code>App 2213 stderr: [ 2014-12-14 14:29:03.3709 2275/0x007f5d4ea08798(Worker 1) utils.rb:84 ]: *** Exception RuntimeError in Rack application object (Missing `secret_key_base` for 'production' environment, set this value in `config/secrets.yml`) (process 2275, thread 0x007f5d4ea08798(Worker 1)):
App 2213 stderr:  from /mnt/bloggy-production/shared/bundle/ruby/2.1.0/gems/railties-4.1.7/lib/rails/application.rb:462:in `validate_secret_key_config!'
</code></pre>

<p>We need to setup an <code>.env</code> file that the <code>dotenv-deployment</code> gem will use to set this cryptographic environment variable. Locally, create a <code>.env</code> file and copy it to the server:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>secret_copy.sh: Copying an .env file to the server </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">echo</span> &amp;ldquo;SECRET_KEY_BASE<span class="o">=</span>&lt;code&gt;be rake secret&lt;/code&gt;&amp;rdquo; &gt; .env
</span><span class='line'>scp -v -i ~/.ec2/gsg-keypair .env ubuntu@ec2-54-69-180-182.us-west-2.compute.amazonaws.com:/home/ubuntu
</span><span class='line'>rm .env
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Back on the server, <code>sudo mv /home/ubuntu/.env /mnt/bloggy-production/shared/</code> to copy the file to the appropriate place. The final <a href="https://github.com/dliggat/bloggy/commit/23bac39176accbee69ba3465d8aad92e822f2972">repo commit</a> ensures that capistrano will symlink this from the <code>release</code> directory into the <code>shared</code> directory on deployment.</p>

<p>One final deployment should do the trick to get this into the Rails app on production: <code>bundle exec cap:deploy</code>:</p>

<p>Sure enough:</p>

<pre><code>ubuntu@production:~$ cd /mnt/bloggy-production/current/
ubuntu@production:/mnt/bloggy-production/current$ ls -la .env
lrwxrwxrwx 1 root root 34 Dec 14 14:49 .env -&gt; /mnt/bloggy-production/shared/.env
</code></pre>

<p>Visiting the URL once more:</p>

<p><img class="center" src="/images/2014/app.png" width="700" title="&lsquo;App on EC2&rsquo;" ></p>

<p>And there we have it! The full stack <strong>{Nginx, Passenger, PostgreSQL}</strong> app is now live on the EC2 instance. This process falls slightly short of the ideal of <em>one-click machine provisioning</em>, but it&rsquo;s pretty close<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>. Going through this additional work seems preferable to me versus <a href="https://www.heroku.com/">Heroku</a> or <a href="http://aws.amazon.com/elasticbeanstalk/">Elastic Beanstalk</a> &ndash; both of which have their place<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup> to be sure, but ultimately abstract away rather more of these details than I would prefer.</p>

<p>With the basic app deployed with a production-grade full stack using <code>rubber</code> &ndash; we can be sure the app has a clear, repeatable, configurable path forward for vertical and horizontal scaling if and when the need should arise.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>There&rsquo;s a fair bit of documentation staleness around these values, so unless you&rsquo;re reading this around December 2014, the world has likely moved onto something newer, and you may get errors as a result. Look for values that will be mutually compliant right now.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>You can find the various options in the dropdown on the right side of <a href="http://alestic.com">alestic.com</a>.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p><code>rubber</code> monkeys with your <code>/etc/hosts</code> file to alias this locally, but I tend to ignore that and just grab it directly from the EC2 console.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>This would likely be rectified with some <code>rubber</code> pull requests, which I hope to create and contribute in the near future.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>Heroku remains the undisputed master of the <em>get this thing deployed ASAP</em> market in my book<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Robust Photo Workflow]]></title>
    <link href="http://liggat.org/2014/03/20/a-robust-photo-workflow/"/>
    <updated>2014-03-20T18:11:09-07:00</updated>
    <id>http://liggat.org/2014/03/20/a-robust-photo-workflow</id>
    <content type="html"><![CDATA[<p>With the proliferation of smartphones, most people now have an excellent camera with them at all times, and are taking many more photographs per year than ever before.<!--more--></p>

<p>However, the current state of photo management on contemporary desktop and mobile operating systems is, frankly, abysmal. Apple, previously the standards-bearer in this arena through the mid-2000s with their <a href="http://www.youtube.com/watch?v=9046oXrm7f8">digital hub</a> strategy, seems to have lost interest in maintaining iPhoto and Aperture as serious photo asset management tools<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. Adobe Lightroom is expensive, complex and unnecessary for most non-professional purposes. Everpix, sadly, <a href="http://www.theverge.com/2013/11/5/5039216/everpix-life-and-death-inside-the-worlds-best-photo-startup">failed</a> to build a business around photo management.</p>

<h3>Requirements</h3>

<p>So what&rsquo;s the answer? I wanted a way to manage my past and future photos with the following characteristics:</p>

<ol>
<li>Every photo in my collection (over 10,000 and counting since 2003), and every photo I take from now on, should be preserved by default in an archive with its <a href="http://en.wikipedia.org/wiki/Metadata">metadata</a> intact.</li>
<li>This archive should have a robust local and offsite backup strategy &ndash; photographs are irreplaceable, and their value to the creator increases with time.</li>
<li>This archive should be as futureproof as possible &ndash; I want to be able to view my photos at any point in the future regardless of device, machine migration, etc.</li>
<li>I should have the ability to view any photo in my collection from a mobile device, i.e. my iPhone or iPad, without having it cached locally.</li>
<li>It should be painless and hassle-free to add new photos into the archive, and thus the backup process.</li>
</ol>


<p>Inspired by <a href="http://www.macstories.net/tutorials/my-photo-management-workflow-early-2014/">Federico Viticci</a>, I&rsquo;ve migrated my photo library to a new system and ongoing process that works really well for me.</p>

<h3>iPhoto => Files &amp; Directories</h3>

<p>Requirement 3, at a stroke, entirely disqualifies database-based applications<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> like iPhoto. As my accumulated photo library was sitting in the increasingly-creaky iPhoto, the first step was to export the original <code>.jpg</code> files. The archive is therefore maintained as a set of files and directories going forward, and is thus highly future-proof.</p>

<p>The single most critical piece of metadata about a photograph is its creation date. Without this, it is inordinately difficult to find a particular photo, or preserve a sense of the original chronology of a series.</p>

<p>Unfortunately, file system metadata is insufficient as a repository for this signal. Machine migrations, underlying file system changes, and general <a href="http://en.wikipedia.org/wiki/Software_rot">bit rot</a> conspire to render this inadequate and fragile. Therefore, it makes sense to encode a photograph&rsquo;s creation date, available in the exif data, right inside its filename.</p>

<p><a href="http://www.sno.phy.queensu.ca/~phil/exiftool/">Exiftool</a>, available in <a href="http://brew.sh/">Homebrew for OS X</a> is a great way to achieve this. After exporting from iPhoto, I was able to rename each file:</p>

<pre><code>exiftool "-FileName&lt;CreateDate" -d "%Y-%m-%d_%H-%M-%S%%-c.%%le" export
</code></pre>

<h3>Binning the Files</h3>

<p>The above operation resulted in a directory with 10,000 <code>.jpg</code> files with an <a href="http://en.wikipedia.org/wiki/Iso8601#General_principles">ISO8601</a>-like filename, e.g.: <code>2011-02-03_16-12-11.jpg</code>. A bit unwieldy, but chronological and consistent. The next step was to separate these files by month, which I accomplished with a simple bit of Ruby (original on <a href="https://gist.github.com/dliggat/9677631">GitHub</a>):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>photo_bin.rb: A ruby script to bin photos by year-month directories </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">glob</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="c1">#{root_dir}/&lt;em&gt;.jpg&amp;rdquo; do |file|</span>
</span><span class='line'>  <span class="n">match</span> <span class="o">=</span> <span class="sr">/.&lt;/em</span><span class="o">&gt;</span><span class="sc">?(</span><span class="p">\</span><span class="n">d</span><span class="p">\</span><span class="n">d</span><span class="p">\</span><span class="n">d</span><span class="p">\</span><span class="n">d</span><span class="p">)</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;(\</span><span class="n">d</span><span class="p">\</span><span class="n">d</span><span class="p">)</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;\</span><span class="n">d</span><span class="p">\</span><span class="n">d_</span><span class="p">\</span><span class="n">d</span><span class="p">\</span><span class="n">d</span><span class="o">-</span><span class="p">\</span><span class="n">d</span><span class="p">\</span><span class="n">d</span><span class="o">-</span><span class="p">\</span><span class="n">d</span><span class="p">\</span><span class="n">d</span><span class="o">.</span><span class="n">*</span><span class="o">.</span><span class="n">jpg</span><span class="vg">$/</span><span class="o">.</span><span class="n">match</span> <span class="n">file</span>
</span><span class='line'>  <span class="k">raise</span> <span class="no">ArgumentError</span><span class="o">.</span><span class="n">new</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">File</span> <span class="n">did</span> <span class="ow">not</span> <span class="ss">match</span><span class="p">:</span> <span class="c1">#{file}&amp;rdquo; unless match&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">year</span>           <span class="o">=</span> <span class="n">match</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="n">month</span>          <span class="o">=</span> <span class="n">match</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'>  <span class="n">month_abbr</span>     <span class="o">=</span> <span class="ss">Date</span><span class="p">:</span><span class="ss">:MONTHNAMES</span><span class="o">[</span><span class="n">month</span><span class="o">.</span><span class="n">to_i</span><span class="o">][</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'>  <span class="n">photo_dir_name</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="c1">#{year}&amp;ndash;#{month}&amp;ndash;#{month_abbr}&amp;rdquo;</span>
</span><span class='line'>  <span class="n">photo_abs_dir</span>  <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span> <span class="n">root_dir</span><span class="p">,</span> <span class="n">photo_dir_name</span>
</span><span class='line'>  <span class="n">abs_file</span>       <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span> <span class="n">file</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  Dir.mkdir photo_abs_dir unless Dir.exist? photo_abs_dir</span>
</span><span class='line'><span class="sr">  FileUtils.mv abs_file, photo_abs_dir</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Storage, Backup, Viewing</h3>

<p>I decided that the best place to actually store this [so-far] 55GB archive was on Google Drive. This has a few benefits:</p>

<ul>
<li><strong>Cheap</strong>: At $2 per month for 100GB of storage as of the <a href="http://googleblog.blogspot.ca/2014/03/save-more-with-google-drive.html">recent price drop</a>, it&rsquo;s hard to argue with the price.</li>
<li><strong>Local and Offsite Backup</strong>: These files live locally in <code>~/GoogleDrive</code> and therefore get subsumed into my wireless home network backups, but also have a disaster-mitigating copy on the cloud.</li>
<li><strong>Mobile Viewing</strong>: The iOS Google Drive app has quietly become a really high-quality piece of iOS software. It&rsquo;s a capable photo viewing app, and easily satisfies the mobile-viewing requirement (though I&rsquo;d like to see <a href="http://unboundapp.com/">Unbound</a> support it eventually also).</li>
</ul>


<p><img class="center" src="/images/2014/gd.png" width="600" title="&lsquo;Google Drive&rsquo;" ></p>

<h3>Dealing with New Photos</h3>

<p>All of this so far covers requirements 1 through 4 splendidly. However, it&rsquo;s all a bit pointless if new photos aren&rsquo;t subsumed into this system on a hassle-free, ongoing basis. The final puzzle piece is also the most convoluted, but so far it seems to be holding up nicely:</p>

<ol>
<li>Take advantage of Dropbox&rsquo;s Camera Upload<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> functionality to send new photos over WiFi from my iPhone to the <code>~/Dropbox/Camera Uploads</code> directory on my Mac. This will happen in the background occasionally without any intervention from me, or I can trigger it manually whenever I want. Of course, <code>.jpg</code> files from other cameras can be placed here also<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>.</li>
<li>Use <a href="http://www.noodlesoft.com/hazel">Hazel</a> to watch that directory and segregate iOS screenshots (no need to archive those) and videos (I&rsquo;m still deciding how they should be handled), and then rename all <code>.jpg</code> files to the ISO8601-style format above. In this case, given the recency, it is reasonable to rely on the file metadata to encode the creation date in the filename.</li>
<li>Again with Hazel watching that directory, send those renamed files to <code>~/GoogleDrive/Photos</code>.</li>
<li>Another Hazel rule watching <code>~/GoogleDrive/Photos</code> will &ldquo;sort into subfolders&rdquo; and place each file into its appropriate year-month directory (e.g. <code>2014-03-Mar</code>), creating that directory if necessary.</li>
</ol>


<p><img class="center" src="/images/2014/hazel.png" width="600" title="&lsquo;Hazel&rsquo;" ></p>

<p>That&rsquo;s it! The archive is consistent, future-proof, viewable and has a strong backup-strategy &ndash; and all new photos from now on have a frictionless pathway into it.</p>

<p>While I&rsquo;m happy with this system for me (and eventually I&rsquo;ll roll it out to my family) Apple, Google, Microsoft, et al really need to solve this problem for their customers. Photos are precious, and people, as a rule, are far worse at ensuring the longevity of bits than paper.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>They were never very good, anyway.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>It is generally a bad idea to rely on these type of programs if you care about accessing your data in the distant future. It will likely be difficult, or at best inconvenient, to read a circa-2014 iPhoto library in 2024. I make an <a href="http://liggat.org/2013/07/21/paperless/">exception</a> in the case of Evernote.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Ideally I wouldn&rsquo;t be relying on two separate cloud-storage providers, but the combination of Google Drive pricing and Dropbox functionality is compelling. Future changes will be easy, anyhow, depending on how the storage market evolves.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>So far this doesn&rsquo;t really apply, as the only camera I use is my iPhone 5s. I hung up my SLR a few years ago.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simulating the Birthday Paradox]]></title>
    <link href="http://liggat.org/2013/10/13/simulating-the-birthday-paradox/"/>
    <updated>2013-10-13T10:59:00-07:00</updated>
    <id>http://liggat.org/2013/10/13/simulating-the-birthday-paradox</id>
    <content type="html"><![CDATA[<p>Probability theory is a pretty special branch of mathematics in the sense that it is (1) highly applicable to daily life; (2) many of its results are easily comprehensible to most people; and yet despite this (3) it remains a profoundly complex area of mathematical inquiry<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.<!--more--></p>

<p>An example which perfectly encapsulates this is the <a href="http://en.wikipedia.org/wiki/Birthday_paradox">birthday paradox</a>. In short, it can be represented by the question:</p>

<blockquote><p>With a group of <code>N</code> randomly chosen people, how large does <code>N</code> need to be so that there&rsquo;s a 50% chance of a shared birthday within the group?</p></blockquote>

<p>The birthday paradox is a great opportunity to use some basic computation as an exploratory tool. I think more people should have the ability to use this.</p>

<h3>Finding N</h3>

<p>The group size is clearly less than or equal to 365. Above 365, we know with 100% certainty that there&rsquo;s a shared birthday somewhere<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. Intuition (or at least my intuition before I knew the answer) usually suggests that the 50% probability threshold value for N is probably at or around the 100-150 mark. In other words, we might guess that you need 100-150 people in the group before the probability of a shared birthday is equal to a coin flip.</p>

<p>It turns out that&rsquo;s a gross overestimate. The actual value is <strong>staggeringly lower</strong> than people tend to guess:</p>

<blockquote><p>With a group size of 23 people, the probability that two people share a birthday is ~= 50.36%.</p></blockquote>

<p>This is a pretty astonishing result. It is, of course, provably true by an <a href="http://en.wikipedia.org/wiki/Birthday_paradox#Calculating_the_probability">analytical argument</a>, but it is actually far easier to convince oneself of its trueness with a simple computational exercise (full version on <a href="https://gist.github.com/dliggat/6963840">GitHub</a>):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>birthday.rb: Simulate the birthday paradox </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;!/us</span><span class="n">r</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">ruby</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;def shared_birthday?(group_size)</span>
</span><span class='line'><span class="sr">  # Generate an array with size &lt;code&gt;group_size&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="ow">and</span> <span class="n">randomly</span> <span class="n">assign</span> <span class="n">every</span> <span class="n">member</span> <span class="n">a</span> <span class="n">birthday</span><span class="o">.</span>
</span><span class='line'>  <span class="c1"># Return true if two members share a birthday; else return false.</span>
</span><span class='line'>  <span class="n">counter</span>   <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">birthdays</span> <span class="o">=</span> <span class="n">group_size</span><span class="o">.</span><span class="n">times</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="nb">rand</span> <span class="mi">365</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">birthdays</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">birthday</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;counter[birthday] += 1</span>
</span><span class='line'><span class="sr">return true if counter[birthday] &amp;gt; 1</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">  false</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">run_birthday_trials</span><span class="p">(</span><span class="n">group_size</span><span class="p">,</span> <span class="n">trial_count</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># Run the shared_birthday? experiment &lt;code&gt;trial_count&lt;/code&gt; times.</span>
</span><span class='line'>  <span class="c1"># Return the number of experiments which resulted in a shared birthday.</span>
</span><span class='line'>  <span class="n">successes</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">trial_count</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">successes</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">shared_birthday?</span> <span class="n">group_size</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">successes</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;run_birthday_trials 23, 1000</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This very simple code runs a series of birthday-paradox experiments &ndash; within each trial, it generates a group of people, and tests for the presence of a shared birthday. By doing this repeatedly, a thousand times in this case, we can approximate the actual probability of a shared birthday with a particular group size.</p>

<h3>Why Bother Sharing This?</h3>

<p>To any mildly-capable programmer<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>, none of this is particularly interesting or novel. Many of us in this line of work have a pretty decent mathematical background, and have done all sorts of these little simulation exercises in the past, both academically and professionally.</p>

<p>However, it is my firm belief that a great many people could stand to benefit if the ability to use basic computational principles and tools were more widely disseminated. Windows and OS X machines ship with browsers with full JavaScript runtimes; Ruby and Python runtimes <em>ship</em> with OS X, and can easily be added to Windows. The tools of exploratory computation are everywhere &ndash; but very few people were ever given the knowledge to use them. This could be easily remedied by offering basic Computer Science in high school, either on its own, or as part of a math or science class. This might be the case today for all I know, but my own experience on that front was not encouraging<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>.</p>

<p>To anyone even moderately interested in the vast possibilities that are unlocked with a bit of computational knowledge, I strongly encourage you to check out <a href="http://www.codecademy.com/">Code Academy</a> or <a href="http://projecteuler.net">Project Euler</a>. Of all of Steve Jobs' various witty and insightful aphorisms, the notion that a computer is a <em>bicycle for the mind</em> has always struck me as especially apt.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Unlike, say, <a href="http://en.wikipedia.org/wiki/Real_analysis">real analysis</a>, which has zero applicability to daily life and is not comprehensible by most people, including myself.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>By the <a href="http://en.wikipedia.org/wiki/Pigeonhole_principle">pigeonhole principle</a>: If we have 365 pigeonholes into which we place 366 objects, at least one pigeonhole must contain more than one object.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p><a href="http://www.codinghorror.com/blog/2007/02/why-cant-programmers-program.html">FizzBuzz</a>, as ever, remains a cautionary tale about our industry.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>Around the time I was in grade 11 and 12, Computer Science was <em>dropped</em> as an offering at my high school. Yes, <em>dropped</em>. Lack of demand; lack of staff to teach it. University was thus my first opportunity to gain exposure to computation as an academic/professional field.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
